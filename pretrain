from dataset_for_PDM import load_data
import argparse
from utils import logger, dist_util
from utils.resample import create_named_schedule_sampler
from utils.script_util import model_and_diffusion_defaults, create_model_and_diffusion, \
    args_to_dict, add_dict_to_argparser
from utils.train_util_single import TrainLoop


def create_argparser():
    defaults = dict(
        data_dir="data/train_data/train_img.txt",
        schedule_sampler="uniform",
        lr=1e-4,
        weight_decay=0.0,
        lr_anneal_steps=200000,
        batch_size=4,
        resolution=512,
        crop=False,
        # image_size=256,
        microbatch=-1,  # -1 disables microbatches
        ema_rate="0.9999",  # comma-separated list of EMA values
        log_interval=10,
        save_interval=10000,
        resume_checkpoint="",
        use_fp16=False,
        fp16_scale_growth=1e-3,
        weight_schedule="sqrt_snr"
    )
    defaults.update(model_and_diffusion_defaults())
    parser = argparse.ArgumentParser()
    add_dict_to_argparser(parser, defaults)
    return parser


def main():
    args = create_argparser().parse_args()

    logger.configure()
    logger.log("load data...")
    data = load_data(data_dir=args.data_dir, resolution=args.resolution, crop=args.crop, batch_size=args.batch_size)

    logger.log("creating model...")
    model, diffusion = create_model_and_diffusion(**args_to_dict(args, model_and_diffusion_defaults().keys()))
    model.to(dist_util.dev())

    schedule_sampler = create_named_schedule_sampler(args.schedule_sampler, diffusion)

    logger.log("pretrain PDM...")
    TrainLoop(model=model, diffusion=diffusion, data=data,
              batch_size=args.batch_size, microbatch=args.microbatch,
              lr=args.lr, ema_rate=args.ema_rate, log_interval=args.log_interval,
              save_interval=args.save_interval, resume_checkpoint=args.resume_checkpoint,
              use_fp16=args.use_fp16, fp16_scale_growth=args.fp16_scale_growth,
              schedule_sampler=schedule_sampler,
              weight_decay=args.weight_decay, lr_anneal_steps=args.lr_anneal_steps,
              weight_schedule=args.weight_schedule).run_loop()


if __name__ == '__main__':
    main()
